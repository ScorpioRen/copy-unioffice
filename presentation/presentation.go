//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package presentation ;import (_ad "archive/zip";_g "bytes";_ee "encoding/xml";_ea "errors";_df "fmt";_fa "github.com/ScorpioRen/copy-unioffice";_bf "github.com/ScorpioRen/copy-unioffice/common";_af "github.com/ScorpioRen/copy-unioffice/common/license";_eeg "github.com/ScorpioRen/copy-unioffice/common/tempstorage";_ec "github.com/ScorpioRen/copy-unioffice/drawing";_bc "github.com/ScorpioRen/copy-unioffice/measurement";_gf "github.com/ScorpioRen/copy-unioffice/schema/soo/dml";_fc "github.com/ScorpioRen/copy-unioffice/schema/soo/dml/chart";_cg "github.com/ScorpioRen/copy-unioffice/schema/soo/ofc/sharedTypes";_db "github.com/ScorpioRen/copy-unioffice/schema/soo/pkg/relationships";_bfb "github.com/ScorpioRen/copy-unioffice/schema/soo/pml";_eb "github.com/ScorpioRen/copy-unioffice/zippkg";_a "image";_b "image/jpeg";_d "io";_eg "log";_fe "os";_ge "path";_dfd "sort";_e "strconv";_f "strings";);

// AddTextBox adds an empty textbox to a slide.
func (_ccgb Slide )AddTextBox ()TextBox {_aeee :=_bfb .NewCT_GroupShapeChoice ();_ccgb ._adfb .CSld .SpTree .Choice =append (_ccgb ._adfb .CSld .SpTree .Choice ,_aeee );_gbda :=_bfb .NewCT_Shape ();_aeee .Sp =append (_aeee .Sp ,_gbda );_gbda .SpPr =_gf .NewCT_ShapeProperties ();_gbda .SpPr .Xfrm =_gf .NewCT_Transform2D ();_gbda .SpPr .PrstGeom =_gf .NewCT_PresetGeometry2D ();_gbda .SpPr .PrstGeom .PrstAttr =_gf .ST_ShapeTypeRect ;_gbda .NvSpPr =_bfb .NewCT_ShapeNonVisual ();_gbda .NvSpPr .CNvSpPr =_gf .NewCT_NonVisualDrawingShapeProps ();_bcd :=true ;_gbda .NvSpPr .CNvSpPr .TxBoxAttr =&_bcd ;_gbda .TxBody =_gf .NewCT_TextBody ();_gbda .TxBody .BodyPr =_gf .NewCT_TextBodyProperties ();_gbda .TxBody .BodyPr .WrapAttr =_gf .ST_TextWrappingTypeSquare ;_gbda .TxBody .BodyPr .SpAutoFit =_gf .NewCT_TextShapeAutofit ();_acf :=TextBox {_gbda };_acf .Properties ().SetWidth (3*_bc .Inch );_acf .Properties ().SetHeight (1*_bc .Inch );_acf .Properties ().SetPosition (0,0);return _acf ;};

// AddDefaultSlideWithLayout tries to replicate what PowerPoint does when
// inserting a slide with a new style by clearing placeholder content and removing
// some placeholders.  Use AddSlideWithLayout if you need more control.
func (_fea *Presentation )AddDefaultSlideWithLayout (l SlideLayout )(Slide ,error ){_baba ,_aee :=_fea .AddSlideWithLayout (l );for _ ,_ebga :=range _baba .PlaceHolders (){_ebga .Clear ();switch _ebga .Type (){case _bfb .ST_PlaceholderTypeFtr ,_bfb .ST_PlaceholderTypeDt ,_bfb .ST_PlaceholderTypeSldNum :_ebga .Remove ();};};return _baba ,_aee ;};

// New initializes and reurns a new presentation
func New ()*Presentation {_dcf :=_agd ();_dcf .ContentTypes .AddOverride ("/\u0070\u0070\u0074\u002fpr\u0065s\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006ff\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u002e\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");_dcf .Rels .AddRelationship ("\u0064\u006f\u0063\u0050\u0072\u006f\u0070\u0073\u002f\u0063\u006f\u0072e\u002e\u0078\u006d\u006c","\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006ba\u0067\u0065\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073\u002f\u006d\u0065\u0074\u0061\u0064\u0061\u0074\u0061/\u0063\u006f\u0072\u0065\u002d\u0070\u0072\u006f\u0070e\u0072\u0074i\u0065\u0073");_dcf .Rels .AddRelationship ("\u0064\u006fc\u0050\u0072\u006fp\u0073\u002f\u0061\u0070\u0070\u002e\u0078\u006d\u006c","\u0068t\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073.\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074i\u006f\u006e\u0073\u0068\u0069p\u0073\u002f\u0065x\u0074\u0065\u006e\u0064\u0065d\u002d\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0069\u0065\u0073");_dcf .Rels .AddRelationship ("p\u0070t\u002f\u0070\u0072\u0065\u0073\u0065\u006e\u0074a\u0074\u0069\u006f\u006e.x\u006d\u006c","\u0068\u0074\u0074\u0070\u003a\u002f\u002fs\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073\u002e\u006f\u0072g\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006fc\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074");_dcf .Rels .AddRelationship ("\u0070\u0070\u0074\u002f\u0070\u0072\u0065\u0073\u0050\u0072\u006f\u0070s\u002e\u0078\u006d\u006c","ht\u0074\u0070\u003a\u002f\u002f\u0073\u0063he\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006et\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068i\u0070s\u002f\u0070\u0072\u0065\u0073\u0050\u0072\u006f\u0070\u0073");_dcf .Rels .AddRelationship ("\u0070\u0070\u0074\u002f\u0076\u0069\u0065\u0077\u0050\u0072\u006f\u0070s\u002e\u0078\u006d\u006c","ht\u0074\u0070\u003a\u002f\u002f\u0073\u0063he\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006et\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068i\u0070s\u002f\u0076\u0069\u0065\u0077\u0050\u0072\u006f\u0070\u0073");_dcf .Rels .AddRelationship ("\u0070\u0070\u0074\u002fta\u0062\u006c\u0065\u0053\u0074\u0079\u006c\u0065\u0073\u002e\u0078\u006d\u006c","\u0068\u0074\u0074\u0070\u003a\u002f\u002fs\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006cf\u006fr\u006d\u0061\u0074\u0073\u002e\u006fr\u0067\u002f\u006f\u0066\u0066\u0069\u0063e\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073\u002f\u0074\u0061\u0062\u006c\u0065\u0053\u0074\u0079\u006ce\u0073");_dcf ._ggff .SldMasterIdLst =_bfb .NewCT_SlideMasterIdList ();_faec :=_bfb .NewSldMaster ();_faec .ClrMap .Bg1Attr =_gf .ST_ColorSchemeIndexLt1 ;_faec .ClrMap .Bg2Attr =_gf .ST_ColorSchemeIndexLt2 ;_faec .ClrMap .Tx1Attr =_gf .ST_ColorSchemeIndexDk1 ;_faec .ClrMap .Tx2Attr =_gf .ST_ColorSchemeIndexDk2 ;_faec .ClrMap .Accent1Attr =_gf .ST_ColorSchemeIndexAccent1 ;_faec .ClrMap .Accent2Attr =_gf .ST_ColorSchemeIndexAccent2 ;_faec .ClrMap .Accent3Attr =_gf .ST_ColorSchemeIndexAccent3 ;_faec .ClrMap .Accent4Attr =_gf .ST_ColorSchemeIndexAccent4 ;_faec .ClrMap .Accent5Attr =_gf .ST_ColorSchemeIndexAccent5 ;_faec .ClrMap .Accent6Attr =_gf .ST_ColorSchemeIndexAccent6 ;_faec .ClrMap .HlinkAttr =_gf .ST_ColorSchemeIndexHlink ;_faec .ClrMap .FolHlinkAttr =_gf .ST_ColorSchemeIndexFolHlink ;_dcf ._cgg =append (_dcf ._cgg ,_faec );_egda :=_fa .AbsoluteFilename (_fa .DocTypePresentation ,_fa .SlideMasterType ,1);_dcf .ContentTypes .AddOverride (_egda ,_fa .SlideMasterContentType );_afef :=_dcf ._egg .AddAutoRelationship (_fa .DocTypePresentation ,_fa .OfficeDocumentType ,1,_fa .SlideMasterType );_bee :=_bfb .NewCT_SlideMasterIdListEntry ();_bee .IdAttr =_fa .Uint32 (2147483648);_bee .RIdAttr =_afef .ID ();_dcf ._ggff .SldMasterIdLst .SldMasterId =append (_dcf ._ggff .SldMasterIdLst .SldMasterId ,_bee );_fdg :=_bf .NewRelationships ();_dcf ._gae =append (_dcf ._gae ,_fdg );_ddd :=_bfb .NewSldLayout ();_adf :=_fdg .AddAutoRelationship (_fa .DocTypePresentation ,_fa .SlideMasterType ,1,_fa .SlideLayoutType );_ggc :=_fa .AbsoluteFilename (_fa .DocTypePresentation ,_fa .SlideLayoutType ,1);_dcf .ContentTypes .AddOverride (_ggc ,_fa .SlideLayoutContentType );_fdg .AddAutoRelationship (_fa .DocTypePresentation ,_fa .SlideMasterType ,1,_fa .ThemeType );_dcf ._ecb =append (_dcf ._ecb ,_ddd );_faec .SldLayoutIdLst =_bfb .NewCT_SlideLayoutIdList ();_befg :=_bfb .NewCT_SlideLayoutIdListEntry ();_befg .IdAttr =_fa .Uint32 (2147483649);_befg .RIdAttr =_adf .ID ();_faec .SldLayoutIdLst .SldLayoutId =append (_faec .SldLayoutIdLst .SldLayoutId ,_befg );_baf :=_bf .NewRelationships ();_dcf ._ebg =append (_dcf ._ebg ,_baf );_baf .AddAutoRelationship (_fa .DocTypePresentation ,_fa .SlideType ,1,_fa .SlideMasterType );_dcf ._ggff .NotesSz .CxAttr =6858000;_dcf ._ggff .NotesSz .CyAttr =9144000;_ddg :=_gf .NewTheme ();_ddg .NameAttr =_fa .String ("\u0075n\u0069o\u0066\u0066\u0069\u0063\u0065\u0020\u0054\u0068\u0065\u006d\u0065");_ddg .ThemeElements .ClrScheme .NameAttr ="\u004f\u0066\u0066\u0069\u0063\u0065";_ddg .ThemeElements .ClrScheme .Dk1 .SysClr =_gf .NewCT_SystemColor ();_ddg .ThemeElements .ClrScheme .Dk1 .SysClr .LastClrAttr =_fa .String ("\u0030\u0030\u0030\u0030\u0030\u0030");_ddg .ThemeElements .ClrScheme .Dk1 .SysClr .ValAttr =_gf .ST_SystemColorValWindowText ;_ddg .ThemeElements .ClrScheme .Lt1 .SysClr =_gf .NewCT_SystemColor ();_ddg .ThemeElements .ClrScheme .Lt1 .SysClr .LastClrAttr =_fa .String ("\u0066\u0066\u0066\u0066\u0066\u0066");_ddg .ThemeElements .ClrScheme .Lt1 .SysClr .ValAttr =_gf .ST_SystemColorValWindow ;_ddg .ThemeElements .ClrScheme .Dk2 .SrgbClr =_gf .NewCT_SRgbColor ();_ddg .ThemeElements .ClrScheme .Dk2 .SrgbClr .ValAttr ="\u0034\u0034\u0035\u0034\u0036\u0061";_ddg .ThemeElements .ClrScheme .Lt2 .SrgbClr =_gf .NewCT_SRgbColor ();_ddg .ThemeElements .ClrScheme .Lt2 .SrgbClr .ValAttr ="\u0065\u0037\u0065\u0037\u0065\u0036";_ddg .ThemeElements .ClrScheme .Accent1 .SrgbClr =_gf .NewCT_SRgbColor ();_ddg .ThemeElements .ClrScheme .Accent1 .SrgbClr .ValAttr ="\u0034\u0034\u0037\u0032\u0063\u0034";_ddg .ThemeElements .ClrScheme .Accent2 .SrgbClr =_gf .NewCT_SRgbColor ();_ddg .ThemeElements .ClrScheme .Accent2 .SrgbClr .ValAttr ="\u0065\u0064\u0037\u0064\u0033\u0031";_ddg .ThemeElements .ClrScheme .Accent3 .SrgbClr =_gf .NewCT_SRgbColor ();_ddg .ThemeElements .ClrScheme .Accent3 .SrgbClr .ValAttr ="\u0061\u0035\u0061\u0035\u0061\u0035";_ddg .ThemeElements .ClrScheme .Accent4 .SrgbClr =_gf .NewCT_SRgbColor ();_ddg .ThemeElements .ClrScheme .Accent4 .SrgbClr .ValAttr ="\u0066\u0066\u0063\u0030\u0030\u0030";_ddg .ThemeElements .ClrScheme .Accent5 .SrgbClr =_gf .NewCT_SRgbColor ();_ddg .ThemeElements .ClrScheme .Accent5 .SrgbClr .ValAttr ="\u0035\u0062\u0039\u0062\u0064\u0035";_ddg .ThemeElements .ClrScheme .Accent6 .SrgbClr =_gf .NewCT_SRgbColor ();_ddg .ThemeElements .ClrScheme .Accent6 .SrgbClr .ValAttr ="\u0037\u0030\u0061\u0064\u0034\u0037";_ddg .ThemeElements .ClrScheme .Hlink .SrgbClr =_gf .NewCT_SRgbColor ();_ddg .ThemeElements .ClrScheme .Hlink .SrgbClr .ValAttr ="\u0030\u0035\u0036\u0033\u0063\u0031";_ddg .ThemeElements .ClrScheme .FolHlink .SrgbClr =_gf .NewCT_SRgbColor ();_ddg .ThemeElements .ClrScheme .FolHlink .SrgbClr .ValAttr ="\u0039\u0035\u0034\u0066\u0037\u0032";_ddg .ThemeElements .FontScheme .NameAttr ="\u004f\u0066\u0066\u0069\u0063\u0065";_ddg .ThemeElements .FontScheme .MajorFont .Latin .TypefaceAttr ="\u0043\u0061\u006c\u0069\u0062\u0072\u0069\u0020\u004c\u0069\u0067\u0068\u0074";_ddg .ThemeElements .FontScheme .MinorFont .Latin .TypefaceAttr ="\u0043a\u006c\u0069\u0062\u0072\u0069";_ddg .ThemeElements .FmtScheme .NameAttr =_fa .String ("\u004f\u0066\u0066\u0069\u0063\u0065");_cdbd :=_gf .NewEG_FillProperties ();_ddg .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties =append (_ddg .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties ,_cdbd );_cdbd .SolidFill =&_gf .CT_SolidColorFillProperties {SchemeClr :&_gf .CT_SchemeColor {ValAttr :_gf .ST_SchemeColorValPhClr }};_cdbd =_gf .NewEG_FillProperties ();_ddg .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties =append (_ddg .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties ,_cdbd );_ddg .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties =append (_ddg .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties ,_cdbd );_cdbd .GradFill =&_gf .CT_GradientFillProperties {RotWithShapeAttr :_fa .Bool (true ),GsLst :&_gf .CT_GradientStopList {},Lin :&_gf .CT_LinearShadeProperties {}};_cdbd .GradFill .Lin .AngAttr =_fa .Int32 (5400000);_cdbd .GradFill .Lin .ScaledAttr =_fa .Bool (false );_fgdd :=_gf .NewCT_GradientStop ();_fgdd .PosAttr .ST_PositiveFixedPercentageDecimal =_fa .Int32 (0);_fgdd .SchemeClr =&_gf .CT_SchemeColor {ValAttr :_gf .ST_SchemeColorValPhClr };_cdbd .GradFill .GsLst .Gs =append (_cdbd .GradFill .GsLst .Gs ,_fgdd );_fgdd =_gf .NewCT_GradientStop ();_fgdd .PosAttr .ST_PositiveFixedPercentageDecimal =_fa .Int32 (50000);_fgdd .SchemeClr =&_gf .CT_SchemeColor {ValAttr :_gf .ST_SchemeColorValPhClr };_cdbd .GradFill .GsLst .Gs =append (_cdbd .GradFill .GsLst .Gs ,_fgdd );_ddg .ThemeElements .FmtScheme .LnStyleLst =_gf .NewCT_LineStyleList ();for _egfe :=0;_egfe < 3;_egfe ++{_ggfc :=_gf .NewCT_LineProperties ();_ggfc .WAttr =_fa .Int32 (int32 (6350*(_egfe +1)));_ggfc .CapAttr =_gf .ST_LineCapFlat ;_ggfc .CmpdAttr =_gf .ST_CompoundLineSng ;_ggfc .AlgnAttr =_gf .ST_PenAlignmentCtr ;_ddg .ThemeElements .FmtScheme .LnStyleLst .Ln =append (_ddg .ThemeElements .FmtScheme .LnStyleLst .Ln ,_ggfc );};_ddg .ThemeElements .FmtScheme .EffectStyleLst =_gf .NewCT_EffectStyleList ();for _cec :=0;_cec < 3;_cec ++{_gged :=_gf .NewCT_EffectStyleItem ();_gged .EffectLst =_gf .NewCT_EffectList ();_ddg .ThemeElements .FmtScheme .EffectStyleLst .EffectStyle =append (_ddg .ThemeElements .FmtScheme .EffectStyleLst .EffectStyle ,_gged );};_ffg :=_gf .NewEG_FillProperties ();_ffg .SolidFill =&_gf .CT_SolidColorFillProperties {SchemeClr :&_gf .CT_SchemeColor {ValAttr :_gf .ST_SchemeColorValPhClr }};_ddg .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties =append (_ddg .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties ,_ffg );_ddg .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties =append (_ddg .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties ,_ffg );_ddg .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties =append (_ddg .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties ,_cdbd );_dcf ._cgc =append (_dcf ._cgc ,_ddg );_efe :=_fa .AbsoluteFilename (_fa .DocTypePresentation ,_fa .ThemeType ,1);_dcf .ContentTypes .AddOverride (_efe ,_fa .ThemeContentType );_dcf ._egg .AddAutoRelationship (_fa .DocTypePresentation ,_fa .OfficeDocumentType ,1,_fa .ThemeType );_cee :=_bf .NewRelationships ();_dcf ._ecd =append (_dcf ._ecd ,_cee );return _dcf ;};

// AddSlideWithLayout adds a new slide with content copied from a layout.  Normally you should
// use AddDefaultSlideWithLayout as it will do some post processing similar to PowerPoint to
// clear place holder text, etc.
func (_dgd *Presentation )AddSlideWithLayout (l SlideLayout )(Slide ,error ){_dfdgc :=_bfb .NewCT_SlideIdListEntry ();_dfdgc .IdAttr =256;for _ ,_fge :=range _dgd ._ggff .SldIdLst .SldId {if _fge .IdAttr >=_dfdgc .IdAttr {_dfdgc .IdAttr =_fge .IdAttr +1;};};_dgd ._ggff .SldIdLst .SldId =append (_dgd ._ggff .SldIdLst .SldId ,_dfdgc );_bedg :=_bfb .NewSld ();_ccg :=_g .Buffer {};_gebd :=_ee .NewEncoder (&_ccg );_bbbf :=_ee .StartElement {Name :_ee .Name {Local :"\u0073\u006c\u0069d\u0065"}};_bbbf .Attr =append (_bbbf .Attr ,_ee .Attr {Name :_ee .Name {Local :"\u0078\u006d\u006cn\u0073"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069o\u006e\u006d\u006c\u002f\u0032\u00300\u0036\u002f\u006da\u0069\u006e"});_bbbf .Attr =append (_bbbf .Attr ,_ee .Attr {Name :_ee .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0061"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"});_bbbf .Attr =append (_bbbf .Attr ,_ee .Attr {Name :_ee .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0070"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069o\u006e\u006d\u006c\u002f\u0032\u00300\u0036\u002f\u006da\u0069\u006e"});_bbbf .Attr =append (_bbbf .Attr ,_ee .Attr {Name :_ee .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0072"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"});_bbbf .Attr =append (_bbbf .Attr ,_ee .Attr {Name :_ee .Name {Local :"\u0078\u006d\u006c\u006e\u0073\u003a\u0073\u0068"},Value :"\u0068\u0074\u0074\u0070\u003a/\u002f\u0073\u0063\u0068\u0065m\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0073\u0068\u0061\u0072e\u0064\u0054\u0079\u0070\u0065\u0073"});_bbbf .Attr =append (_bbbf .Attr ,_ee .Attr {Name :_ee .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"},Value :"\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"});if _edb :=l ._gebfa .CSld .MarshalXML (_gebd ,_bbbf );_edb !=nil {return Slide {},_edb ;};_gebd .Flush ();_bad :=_ee .NewDecoder (&_ccg );_bedg .CSld =_bfb .NewCT_CommonSlideData ();if _ada :=_bad .Decode (_bedg .CSld );_ada !=nil {return Slide {},_ada ;};_bedg .CSld .NameAttr =nil ;_bedg .CSld .SpTree .Choice =_dac (_bedg .CSld .SpTree .Choice );_dgd ._egf =append (_dgd ._egf ,_bedg );_ca :=_dgd ._egg .AddAutoRelationship (_fa .DocTypePresentation ,_fa .OfficeDocumentType ,len (_dgd ._egf ),_fa .SlideType );_dfdgc .RIdAttr =_ca .ID ();_aaa :=_fa .AbsoluteFilename (_fa .DocTypePresentation ,_fa .SlideType ,len (_dgd ._egf ));_dgd .ContentTypes .AddOverride (_aaa ,_fa .SlideContentType );_cga :=_bf .NewRelationships ();_dgd ._egad =append (_dgd ._egad ,_cga );_ecdb :=len (_dgd ._egad )-1;for _bdb ,_ccf :=range _dgd ._ecb {if _ccf ==l .X (){_dffc :=_dgd ._ebg [_bdb ];for _ ,_faa :=range _dffc .X ().Relationship {if _faa .TypeAttr !=_fa .SlideMasterType {_dgd ._egad [_ecdb ].X ().Relationship =append (_dgd ._egad [_ecdb ].X ().Relationship ,_faa );};};_cga .AddAutoRelationship (_fa .DocTypePresentation ,_fa .SlideType ,_bdb +1,_fa .SlideLayoutType );};};_fcab :=Slide {_dfdgc ,_bedg ,_dgd };return _fcab ,nil ;};

// X returns the inner wrapped XML type.
func (_aba SlideLayout )X ()*_bfb .SldLayout {return _aba ._gebfa };

// Image is an image within a slide.
type Image struct{_bb *_bfb .CT_Picture };

// GridSpacing returns the GridSpacing property.
func (_aebc ViewProperties )GridSpacing ()*_gf .CT_PositiveSize2D {return _aebc ._adde .GridSpacing };

// ShowPr returns the ShowPr property.
func (_egc PresentationProperties )ShowPr ()*_bfb .CT_ShowProperties {return _egc ._gfg .ShowPr };

// TextBox is a text box within a slide.
type TextBox struct{_baee *_bfb .CT_Shape };

// SetOffsetY sets vertical offset of text box in distance units (see measurement package).
func (_gfd TextBox )SetOffsetY (offY float64 ){_gdg :=_gfd .getOff ();_feab :=_bc .ToEMU (offY );_gdg .YAttr =_gf .ST_Coordinate {ST_CoordinateUnqualified :&_feab };};

// SlideLayouts returns a slice of all layouts in SlideMaster.
func (_gdd SlideMaster )SlideLayouts ()[]SlideLayout {_bfde :=map[string ]int {};_fef :=[]SlideLayout {};for _ ,_aecaa :=range _gdd ._aeca .Relationships (){_cac :=_f .Replace (_aecaa .Target (),".\u002e\u002f\u0073\u006c\u0069\u0064e\u004c\u0061\u0079\u006f\u0075\u0074\u0073\u002f\u0073l\u0069\u0064\u0065L\u0061y\u006f\u0075\u0074","",-1);_cac =_f .Replace (_cac ,"\u002e\u0078\u006d\u006c","",-1);if _afg ,_bdff :=_e .ParseInt (_cac ,10,32);_bdff ==nil {_bfde [_aecaa .ID ()]=int (_afg );};};for _ ,_fdff :=range _gdd ._abe .SldLayoutIdLst .SldLayoutId {if _bec ,_fcca :=_bfde [_fdff .RIdAttr ];_fcca {_cbac :=_gdd ._bcbf ._ecb [_bec -1];_fef =append (_fef ,SlideLayout {_cbac });};};return _fef ;};

// SaveAsTemplate writes the presentation out to a writer in the Zip package format as a template
func (_ffb *Presentation )SaveAsTemplate (w _d .Writer )error {return _ffb .save (w ,true )};type sort2d []*TextItem ;

// SetText sets the text of a placeholder for the initial paragraph. This is a
// shortcut method that is useful for things like titles which only contain a
// single paragraph.
func (_gee PlaceHolder )SetText (text string ){_gee .Clear ();_cdb :=_gf .NewEG_TextRun ();_cdb .R =_gf .NewCT_RegularTextRun ();_cdb .R .T =text ;if len (_gee ._dfe .TxBody .P )==0{_gee ._dfe .TxBody .P =append (_gee ._dfe .TxBody .P ,_gf .NewCT_TextParagraph ());};_gee ._dfe .TxBody .P [0].EG_TextRun =nil ;_gee ._dfe .TxBody .P [0].EG_TextRun =append (_gee ._dfe .TxBody .P [0].EG_TextRun ,_cdb );};

// Properties returns the properties of the TextBox.
func (_cgafa TextBox )Properties ()_ec .ShapeProperties {if _cgafa ._baee .SpPr ==nil {_cgafa ._baee .SpPr =_gf .NewCT_ShapeProperties ();};return _ec .MakeShapeProperties (_cgafa ._baee .SpPr );};

// GetTableStyleById returns *dml.CT_TableStyle by its style id.
func (_eac *Presentation )GetTableStyleById (id string )*_gf .CT_TableStyle {_gba :=_eac ._dca .TblStyle ();for _ ,_cbce :=range _gba {if _cbce .StyleIdAttr ==id {return _cbce ;};};return nil ;};func (_cdg *Presentation )nextSlideID ()uint32 {_fgdda :=uint32 (256);for _ ,_bga :=range _cdg ._ggff .SldIdLst .SldId {if _bga .IdAttr >=_fgdda {_fgdda =_bga .IdAttr +1;};};return _fgdda ;};

// GetImageByRelID returns an ImageRef with the associated relation ID in the
// document.
func (_dada *Presentation )GetImageByRelID (relID string )(_bf .ImageRef ,bool ){for _ ,_ffa :=range _dada .Images {if _ffa .RelID ()==relID {return _ffa ,true ;};};return _bf .ImageRef {},false ;};

// GetTextBoxes returns a list of all text boxes from a slide.
func (_ccff Slide )GetTextBoxes ()[]*TextBox {_egfc :=[]*TextBox {};_fbg :=_ccff ._adfb .CSld .SpTree .Choice ;for _ ,_dddf :=range _fbg {for _ ,_dgdd :=range _dddf .Sp {if _dgdd .NvSpPr .CNvSpPr .TxBoxAttr !=nil &&*_dgdd .NvSpPr .CNvSpPr .TxBoxAttr {_egfc =append (_egfc ,&TextBox {_dgdd });};};};return _egfc ;};

// AddSlide adds a new slide to the presentation.
func (_dgc *Presentation )AddSlide ()Slide {_fba :=_bfb .NewCT_SlideIdListEntry ();_fba .IdAttr =_dgc .nextSlideID ();_dgc ._ggff .SldIdLst .SldId =append (_dgc ._ggff .SldIdLst .SldId ,_fba );_da :=_bfb .NewSld ();_da .CSld .SpTree .NvGrpSpPr .CNvPr .IdAttr =1;_da .CSld .SpTree .GrpSpPr .Xfrm =_gf .NewCT_GroupTransform2D ();_da .CSld .SpTree .GrpSpPr .Xfrm .Off =_gf .NewCT_Point2D ();_da .CSld .SpTree .GrpSpPr .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_fa .Int64 (0);_da .CSld .SpTree .GrpSpPr .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_fa .Int64 (0);_da .CSld .SpTree .GrpSpPr .Xfrm .Ext =_gf .NewCT_PositiveSize2D ();_da .CSld .SpTree .GrpSpPr .Xfrm .Ext .CxAttr =int64 (0*_bc .Point );_da .CSld .SpTree .GrpSpPr .Xfrm .Ext .CyAttr =int64 (0*_bc .Point );_da .CSld .SpTree .GrpSpPr .Xfrm .ChOff =_da .CSld .SpTree .GrpSpPr .Xfrm .Off ;_da .CSld .SpTree .GrpSpPr .Xfrm .ChExt =_da .CSld .SpTree .GrpSpPr .Xfrm .Ext ;_dgc ._egf =append (_dgc ._egf ,_da );_dcaf :=_dgc ._egg .AddAutoRelationship (_fa .DocTypePresentation ,_fa .OfficeDocumentType ,len (_dgc ._egf ),_fa .SlideType );_fba .RIdAttr =_dcaf .ID ();_befge :=_fa .AbsoluteFilename (_fa .DocTypePresentation ,_fa .SlideType ,len (_dgc ._egf ));_dgc .ContentTypes .AddOverride (_befge ,_fa .SlideContentType );_ege :=_bf .NewRelationships ();_dgc ._egad =append (_dgc ._egad ,_ege );_ege .AddAutoRelationship (_fa .DocTypePresentation ,_fa .SlideType ,len (_dgc ._ecb ),_fa .SlideLayoutType );return Slide {_fba ,_da ,_dgc };};

// X returns the inner wrapped XML type.
func (_eabd PresentationProperties )X ()*_bfb .PresentationPr {return _eabd ._gfg };

// X returns TextBox's underlying *pml.CT_Shape.
func (_edae TextBox )X ()*_bfb .CT_Shape {return _edae ._baee };func (_dad *Presentation )saveToFile (_adg string ,_cce bool )error {_ecfb ,_cgaf :=_fe .Create (_adg );if _cgaf !=nil {return _cgaf ;};defer _ecfb .Close ();return _dad .save (_ecfb ,_cce );};

// X returns the inner wrapped XML type.
func (_dee *Presentation )X ()*_bfb .Presentation {return _dee ._ggff };

// ExtractText returns text from a presentation as a PresentationText object.
func (_be *Presentation )ExtractText ()*PresentationText {_geb :=[]*SlideText {};for _ ,_fce :=range _be .Slides (){_ba :=_fce .ExtractText ();if _ba !=nil {_geb =append (_geb ,_ba );};};return &PresentationText {Slides :_geb };};

// NewViewProperties constructs a new ViewProperties.
func NewViewProperties ()ViewProperties {return ViewProperties {_adde :_bfb .NewViewPr ()}};

// ValidateWithPath validates the slide passing path informaton for a better
// error message.
func (_baac Slide )ValidateWithPath (path string )error {if _edcgc :=_baac ._adfb .ValidateWithPath (path );_edcgc !=nil {return _edcgc ;};for _ ,_fdca :=range _baac ._adfb .CSld .SpTree .Choice {for _ ,_gfgd :=range _fdca .Sp {if _gfgd .TxBody !=nil {if len (_gfgd .TxBody .P )==0{return _ea .New (path +"\u0020\u003a \u0073\u006c\u0069\u0064\u0065 \u0073\u0068\u0061\u0070\u0065 \u0077\u0069\u0074\u0068\u0020\u0061\u0020\u0074\u0078\u0062\u006f\u0064\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0070\u0061\u0072\u0061\u0067\u0072\u0061\u0070\u0068\u0073");};};};};return nil ;};

// SlideLayout is a layout from which slides can be created.
type SlideLayout struct{_gebfa *_bfb .SldLayout };

// Presentation is the a presentation base document.
type Presentation struct{_bf .DocBase ;_ggff *_bfb .Presentation ;_egg _bf .Relationships ;_egf []*_bfb .Sld ;_egad []_bf .Relationships ;_cgg []*_bfb .SldMaster ;_gae []_bf .Relationships ;_ecb []*_bfb .SldLayout ;_ebg []_bf .Relationships ;_cgc []*_gf .Theme ;_ecd []_bf .Relationships ;_dca _bf .TableStyles ;_bcaf PresentationProperties ;_ab ViewProperties ;_agg []*_gf .CT_Hyperlink ;_cgf []*_fc .ChartSpace ;_ggd []*_bfb .HandoutMaster ;_bg []*_bfb .NotesMaster ;_gbd []*_fa .XSDAny ;_afe map[string ]string ;};

// Save writes the presentation out to a writer in the Zip package format
func (_gfe *Presentation )Save (w _d .Writer )error {return _gfe .save (w ,false )};

// WebPr returns the WebPr property.
func (_dge PresentationProperties )WebPr ()*_bfb .CT_WebProperties {return _dge ._gfg .WebPr };func (_ebag TextBox )getOff ()*_gf .CT_Point2D {if _ebag ._baee .SpPr ==nil {_ebag ._baee .SpPr =_gf .NewCT_ShapeProperties ();};if _ebag ._baee .SpPr .Xfrm ==nil {_ebag ._baee .SpPr .Xfrm =_gf .NewCT_Transform2D ();};if _ebag ._baee .SpPr .Xfrm .Off ==nil {_ebag ._baee .SpPr .Xfrm .Off =_gf .NewCT_Point2D ();};return _ebag ._baee .SpPr .Xfrm .Off ;};

// X returns the inner wrapped XML type.
func (_dbae SlideMaster )X ()*_bfb .SldMaster {return _dbae ._abe };

// Type returns the placeholder type
func (_bef PlaceHolder )Type ()_bfb .ST_PlaceholderType {return _bef ._dfe .NvSpPr .NvPr .Ph .TypeAttr };func (_ggbf *Presentation )save (_fbae _d .Writer ,_bae bool )error {if _fdgd :=_ggbf ._ggff .Validate ();_fdgd !=nil {_eg .Printf ("\u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0065\u0072\u0072\u006fr\u0020i\u006e\u0020\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0073",_fdgd );};if !_af .GetLicenseKey ().IsLicensed ()&&!_befd {_df .Println ("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065");_df .Println ("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");return _ea .New ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064");};if _bae {_ggbf .ContentTypes .RemoveOverride ("\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006ff\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u002e\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");_ggbf .ContentTypes .EnsureOverride ("/\u0070\u0070\u0074\u002fpr\u0065s\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u002e\u0078\u006d\u006c","\u0061\u0070pl\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074s\u002d\u006f\u0066\u0066ic\u0065\u0064o\u0063u\u006d\u0065\u006e\u0074\u002e\u0070r\u0065\u0073\u0065n\u0074\u0061t\u0069\u006f\u006e\u006d\u006c\u002e\u0074\u0065\u006d\u0070\u006c\u0061\u0074\u0065.\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");}else {_ggbf .ContentTypes .RemoveOverride ("\u0061\u0070pl\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074s\u002d\u006f\u0066\u0066ic\u0065\u0064o\u0063u\u006d\u0065\u006e\u0074\u002e\u0070r\u0065\u0073\u0065n\u0074\u0061t\u0069\u006f\u006e\u006d\u006c\u002e\u0074\u0065\u006d\u0070\u006c\u0061\u0074\u0065.\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");_ggbf .ContentTypes .EnsureOverride ("/\u0070\u0070\u0074\u002fpr\u0065s\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006ff\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u002e\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");};_gea :=_fa .DocTypePresentation ;_gfcg :=_ad .NewWriter (_fbae );defer _gfcg .Close ();if _beeb :=_eb .MarshalXML (_gfcg ,_fa .BaseRelsFilename ,_ggbf .Rels .X ());_beeb !=nil {return _beeb ;};if _ac :=_eb .MarshalXMLByType (_gfcg ,_gea ,_fa .ExtendedPropertiesType ,_ggbf .AppProperties .X ());_ac !=nil {return _ac ;};if _ecg :=_eb .MarshalXMLByType (_gfcg ,_gea ,_fa .CorePropertiesType ,_ggbf .CoreProperties .X ());_ecg !=nil {return _ecg ;};if _ggec :=_eb .MarshalXMLByType (_gfcg ,_gea ,_fa .PresentationPropertiesType ,_ggbf ._bcaf .X ());_ggec !=nil {return _ggec ;};if _dgcc :=_eb .MarshalXMLByType (_gfcg ,_gea ,_fa .ViewPropertiesType ,_ggbf ._ab .X ());_dgcc !=nil {return _dgcc ;};if _bdfg :=_eb .MarshalXMLByType (_gfcg ,_gea ,_fa .TableStylesType ,_ggbf ._dca .X ());_bdfg !=nil {return _bdfg ;};if _ggbf .CustomProperties .X ()!=nil {if _baa :=_eb .MarshalXMLByType (_gfcg ,_gea ,_fa .CustomPropertiesType ,_ggbf .CustomProperties .X ());_baa !=nil {return _baa ;};};if _ggbf .Thumbnail !=nil {_fcg ,_ddgg :=_gfcg .Create ("\u0064\u006f\u0063Pr\u006f\u0070\u0073\u002f\u0074\u0068\u0075\u006d\u0062\u006e\u0061\u0069\u006c\u002e\u006a\u0070\u0065\u0067");if _ddgg !=nil {return _ddgg ;};if _egfd :=_b .Encode (_fcg ,_ggbf .Thumbnail ,nil );_egfd !=nil {return _egfd ;};};_dgdf :=_fa .AbsoluteFilename (_gea ,_fa .OfficeDocumentType ,0);if _eff :=_eb .MarshalXML (_gfcg ,_dgdf ,_ggbf ._ggff );_eff !=nil {return _eff ;};if _cfa :=_eb .MarshalXML (_gfcg ,_eb .RelationsPathFor (_dgdf ),_ggbf ._egg .X ());_cfa !=nil {return _cfa ;};for _fag ,_bfc :=range _ggbf ._egf {_adb :=_fa .AbsoluteFilename (_fa .DocTypePresentation ,_fa .SlideType ,_fag +1);_eb .MarshalXML (_gfcg ,_adb ,_bfc );if !_ggbf ._egad [_fag ].IsEmpty (){_gcga :=_eb .RelationsPathFor (_adb );_eb .MarshalXML (_gfcg ,_gcga ,_ggbf ._egad [_fag ].X ());};};for _adbg ,_ecgd :=range _ggbf ._cgg {_fac :=_fa .AbsoluteFilename (_fa .DocTypePresentation ,_fa .SlideMasterType ,_adbg +1);_eb .MarshalXML (_gfcg ,_fac ,_ecgd );if !_ggbf ._gae [_adbg ].IsEmpty (){_feea :=_eb .RelationsPathFor (_fac );_eb .MarshalXML (_gfcg ,_feea ,_ggbf ._gae [_adbg ].X ());};};for _aec ,_cgcb :=range _ggbf ._ecb {_eag :=_fa .AbsoluteFilename (_fa .DocTypePresentation ,_fa .SlideLayoutType ,_aec +1);_eb .MarshalXML (_gfcg ,_eag ,_cgcb );if !_ggbf ._ebg [_aec ].IsEmpty (){_agf :=_eb .RelationsPathFor (_eag );_eb .MarshalXML (_gfcg ,_agf ,_ggbf ._ebg [_aec ].X ());};};for _dcb ,_abd :=range _ggbf ._cgc {_ddf :=_fa .AbsoluteFilename (_fa .DocTypePresentation ,_fa .ThemeType ,_dcb +1);_eb .MarshalXML (_gfcg ,_ddf ,_abd );if !_ggbf ._ecd [_dcb ].IsEmpty (){_cba :=_eb .RelationsPathFor (_ddf );_eb .MarshalXML (_gfcg ,_cba ,_ggbf ._ecd [_dcb ].X ());};};for _adaf ,_facd :=range _ggbf ._cgf {_adad :=_fa .AbsoluteFilename (_gea ,_fa .ChartType ,_adaf +1);_eb .MarshalXML (_gfcg ,_adad ,_facd );};for _affc ,_bgd :=range _ggbf ._ggd {_bcf :=_fa .AbsoluteFilename (_gea ,_fa .HandoutMasterType ,_affc +1);_eb .MarshalXML (_gfcg ,_bcf ,_bgd );};for _fgc ,_gcf :=range _ggbf ._bg {_add :=_fa .AbsoluteFilename (_gea ,_fa .NotesMasterType ,_fgc +1);_eb .MarshalXML (_gfcg ,_add ,_gcf );};for _eaaa ,_fcdb :=range _ggbf ._gbd {_cfef :=_fa .AbsoluteFilename (_gea ,_fa .CustomXMLType ,_eaaa +1);_eb .MarshalXML (_gfcg ,_cfef ,_fcdb );};for _abb ,_gfgb :=range _ggbf .Images {if _efec :=_bf .AddImageToZip (_gfcg ,_gfgb ,_abb +1,_fa .DocTypePresentation );_efec !=nil {return _efec ;};};_ggbf .ContentTypes .EnsureDefault ("\u0070\u006e\u0067","\u0069m\u0061\u0067\u0065\u002f\u0070\u006eg");_ggbf .ContentTypes .EnsureDefault ("\u006a\u0070\u0065\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_ggbf .ContentTypes .EnsureDefault ("\u006a\u0070\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_ggbf .ContentTypes .EnsureDefault ("\u0077\u006d\u0066","i\u006d\u0061\u0067\u0065\u002f\u0078\u002d\u0077\u006d\u0066");if _adbf :=_eb .MarshalXML (_gfcg ,_fa .ContentTypesFilename ,_ggbf .ContentTypes .X ());_adbf !=nil {return _adbf ;};if _fbd :=_ggbf .WriteExtraFiles (_gfcg );_fbd !=nil {return _fbd ;};return nil ;};

// RemoveSlide removes a slide from a presentation.
func (_cdc *Presentation )RemoveSlide (s Slide )error {_bdd :=false ;_age :=0;for _ggda ,_eda :=range _cdc ._egf {if _eda ==s ._adfb {if _cdc ._ggff .SldIdLst .SldId [_ggda ]!=s ._gbcg {return _ea .New ("i\u006e\u0063\u006f\u006e\u0073\u0069s\u0074\u0065\u006e\u0063\u0079\u0020i\u006e\u0020\u0073\u006c\u0069\u0064\u0065s\u0020\u0061\u006e\u0064\u0020\u0049\u0044\u0020\u006c\u0069s\u0074");};copy (_cdc ._egf [_ggda :],_cdc ._egf [_ggda +1:]);_cdc ._egf =_cdc ._egf [0:len (_cdc ._egf )-1];copy (_cdc ._egad [_ggda :],_cdc ._egad [_ggda +1:]);_cdc ._egad =_cdc ._egad [0:len (_cdc ._egad )-1];copy (_cdc ._ggff .SldIdLst .SldId [_ggda :],_cdc ._ggff .SldIdLst .SldId [_ggda +1:]);_cdc ._ggff .SldIdLst .SldId =_cdc ._ggff .SldIdLst .SldId [0:len (_cdc ._ggff .SldIdLst .SldId )-1];_bdd =true ;_age =_ggda ;};};if !_bdd {return _ea .New ("u\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066i\u006e\u0064\u0020\u0073li\u0064\u0065");};_dbf :=_fa .AbsoluteFilename (_fa .DocTypePresentation ,_fa .SlideType ,0);return _cdc .ContentTypes .RemoveOverrideByIndex (_dbf ,_age );};

// SaveToFileAsTemplate writes the Presentation out to a file as a template.
func (_eaab *Presentation )SaveToFileAsTemplate (path string )error {return _eaab .saveToFile (path ,true );};

// SlideMasters returns the slide masters defined in the presentation.
func (_afa *Presentation )SlideMasters ()[]SlideMaster {_dgg :=[]SlideMaster {};for _baag ,_cbc :=range _afa ._cgg {_dgg =append (_dgg ,SlideMaster {_afa ,_afa ._gae [_baag ],_cbc });};return _dgg ;};

// PresentationText is an array of extracted text items which has some methods for representing extracted text.
type PresentationText struct{Slides []*SlideText ;};

// ExtractText returns text from a slide as a SlideText object.
func (_cge *Slide )ExtractText ()*SlideText {_cd :=_cge ._cgcbc ;_eeb :=[]*TextItem {};for _ ,_eaa :=range _cge ._adfb .CSld .SpTree .Choice {for _ ,_gc :=range _eaa .Sp {_eeb =append (_eeb ,_dc (_cd ,_gc ,nil ,nil ,_gc .SpPr .Xfrm ,0,_gc .TxBody .P )...);};for _ ,_cf :=range _eaa .GraphicFrame {if _cf !=nil &&_cf .Graphic !=nil &&_cf .Graphic .GraphicData !=nil {_fd :=_cf .Xfrm ;for _ ,_gcg :=range _cf .Graphic .GraphicData .Any {if _ag ,_de :=_gcg .(*_gf .Tbl );_de {_beb :=&_ag .CT_Table ;_gg :=0;for _gb ,_edc :=range _ag .Tr {for _agb ,_ga :=range _edc .Tc {_gd :=&TableInfo {Table :_beb ,Row :_edc ,Cell :_ga ,RowIndex :_gb ,ColIndex :_agb };_eeb =append (_eeb ,_dc (_cd ,nil ,_cf ,_gd ,_fd ,_gg ,_ga .TxBody .P )...);_gg ++;};};};};};};};_dfd .Sort (sort2d (_eeb ));return &SlideText {Items :_eeb };};

// OpenTemplate opens a template file.
func OpenTemplate (fn string )(*Presentation ,error ){_edd ,_cdd :=Open (fn );if _cdd !=nil {return nil ,_cdd ;};return _edd ,nil ;};

// SaveToFile writes the Presentation out to a file.
func (_cgcc *Presentation )SaveToFile (path string )error {return _cgcc .saveToFile (path ,false )};

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_bcc *Presentation )AddImage (i _bf .Image )(_bf .ImageRef ,error ){_gbc :=_bf .MakeImageRef (i ,&_bcc .DocBase ,_bcc ._egg );if i .Data ==nil &&i .Path ==""{return _gbc ,_ea .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");};if i .Format ==""{return _gbc ,_ea .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};if i .Size .X ==0||i .Size .Y ==0{return _gbc ,_ea .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");};if i .Path !=""{_aag :=_eeg .Add (i .Path );if _aag !=nil {return _gbc ,_aag ;};};_bcc .Images =append (_bcc .Images ,_gbc );_bcc .ContentTypes .EnsureDefault ("\u0070\u006e\u0067","\u0069m\u0061\u0067\u0065\u002f\u0070\u006eg");_bcc .ContentTypes .EnsureDefault ("\u006a\u0070\u0065\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_bcc .ContentTypes .EnsureDefault ("\u006a\u0070\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_bcc .ContentTypes .EnsureDefault ("\u0077\u006d\u0066","i\u006d\u0061\u0067\u0065\u002f\u0078\u002d\u0077\u006d\u0066");_bcc .ContentTypes .EnsureDefault (i .Format ,"\u0069\u006d\u0061\u0067\u0065\u002f"+i .Format );return _gbc ,nil ;};

// Slides returns the slides in the presentation.
func (_baec *Presentation )Slides ()[]Slide {_eegg :=[]Slide {};for _bbeb ,_cfd :=range _baec ._egf {_eegg =append (_eegg ,Slide {_baec ._ggff .SldIdLst .SldId [_bbeb ],_cfd ,_baec });};return _eegg ;};

// Slide represents a slide of a presentation.
type Slide struct{_gbcg *_bfb .CT_SlideIdListEntry ;_adfb *_bfb .Sld ;_cgcbc *Presentation ;};

// NotesTextViewPr returns the NotesTextViewPr property.
func (_acag ViewProperties )NotesTextViewPr ()*_bfb .CT_NotesTextViewProperties {return _acag ._adde .NotesTextViewPr ;};func _dc (_gab *Presentation ,_gcc *_bfb .CT_Shape ,_dgb *_bfb .CT_GraphicalObjectFrame ,_bfe *TableInfo ,_fcf *_gf .CT_Transform2D ,_fca int ,_cb []*_gf .CT_TextParagraph )[]*TextItem {_geg :=[]*TextItem {};var _ae ,_ggf int64 ;_eae :=_fcf ==nil ;_fcee :=0;for _ ,_eab :=range _cb {for _ ,_fb :=range _eab .EG_TextRun {if _aa :=_fb .R ;_aa !=nil {if !_eae {if _fcf .Off !=nil {if _aff :=_fcf .Off .XAttr .ST_CoordinateUnqualified ;_aff !=nil {_ae =*_aff ;_eae =true ;};if _gcgg :=_fcf .Off .YAttr .ST_CoordinateUnqualified ;_gcgg !=nil {_ggf =*_gcgg ;_eae =true ;};};};_geg =append (_geg ,&TextItem {Presentation :_gab ,Shape :_gcc ,GraphicFrame :_dgb ,TableInfo :_bfe ,Paragraph :_eab ,Run :_aa ,Text :_aa .T ,_dg :_ae ,_dfdg :_ggf ,_ed :_fca ,_ega :_fcee });_fcee ++;};};};return _geg ;};

// AddParagraph adds a paragraph to the text box
func (_dfb TextBox )AddParagraph ()_ec .Paragraph {_bdca :=_gf .NewCT_TextParagraph ();_dfb ._baee .TxBody .P =append (_dfb ._baee .TxBody .P ,_bdca );return _ec .MakeParagraph (_bdca );};

// Close closes the presentation, removing any temporary files that might have been
// created when opening a document.
func (_bde *Presentation )Close ()error {if _bde .TmpPath !=""{return _eeg .RemoveAll (_bde .TmpPath );};return nil ;};func (_gaea *Presentation )Validate ()error {if _eef :=_gaea ._ggff .Validate ();_eef !=nil {return _eef ;};for _edce ,_cgca :=range _gaea .Slides (){if _befb :=_cgca .ValidateWithPath (_df .Sprintf ("\u0053l\u0069\u0064\u0065\u005b\u0025\u0064]",_edce ));_befb !=nil {return _befb ;};};for _gccf ,_eaf :=range _gaea ._cgg {if _aef :=_eaf .ValidateWithPath (_df .Sprintf ("\u0053l\u0069d\u0065\u004d\u0061\u0073\u0074\u0065\u0072\u005b\u0025\u0064\u005d",_gccf ));_aef !=nil {return _aef ;};};for _bbe ,_eea :=range _gaea ._ecb {if _bbc :=_eea .ValidateWithPath (_df .Sprintf ("\u0053l\u0069d\u0065\u004c\u0061\u0079\u006f\u0075\u0074\u005b\u0025\u0064\u005d",_bbe ));_bbc !=nil {return _bbc ;};};return nil ;};

// NormalViewPr returns the NormalViewPr property.
func (_ebf ViewProperties )NormalViewPr ()*_bfb .CT_NormalViewProperties {return _ebf ._adde .NormalViewPr ;};

// GetPlaceholderByIndex returns a placeholder given its index.  If there are multiplace
// placeholders of the same index, this method returns the first one.  You must use the
// PlaceHolders() method to access the others.
func (_cfb Slide )GetPlaceholderByIndex (idx uint32 )(PlaceHolder ,error ){for _ ,_cegb :=range _cfb ._adfb .CSld .SpTree .Choice {for _ ,_afc :=range _cegb .Sp {if _afc .NvSpPr !=nil &&_afc .NvSpPr .NvPr !=nil &&_afc .NvSpPr .NvPr .Ph !=nil {if (idx ==0&&_afc .NvSpPr .NvPr .Ph .IdxAttr ==nil )||(_afc .NvSpPr .NvPr .Ph .IdxAttr !=nil &&*_afc .NvSpPr .NvPr .Ph .IdxAttr ==idx ){return PlaceHolder {_afc ,_cfb ._adfb },nil ;};};};};return PlaceHolder {},_ea .New ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066i\u006e\u0064\u0020\u0070\u006c\u0061\u0063\u0065\u0068\u006fl\u0064\u0065\u0072");};

// X returns the inner wrapped XML type.
func (_dda Slide )X ()*_bfb .Sld {return _dda ._adfb };

// Type returns the type of the slide layout.
func (_gac SlideLayout )Type ()_bfb .ST_SlideLayoutType {return _gac ._gebfa .TypeAttr };

// Index returns the placeholder index
func (_fbf PlaceHolder )Index ()uint32 {if _fbf ._dfe .NvSpPr .NvPr .Ph .IdxAttr ==nil {return 0;};return *_fbf ._dfe .NvSpPr .NvPr .Ph .IdxAttr ;};

// Name returns the name of the slide layout.
func (_afb SlideLayout )Name ()string {if _afb ._gebfa .CSld !=nil &&_afb ._gebfa .CSld .NameAttr !=nil {return *_afb ._gebfa .CSld .NameAttr ;};return "";};

// Text returns text from a presentation as one string separated with line breaks.
func (_feg *PresentationText )Text ()string {_ebef :=_g .NewBuffer ([]byte {});for _ ,_cfee :=range _feg .Slides {_ebef .WriteString (_cfee .Text ());};return _ebef .String ();};

// X returns the inner wrapped XML type.
func (_cggd ViewProperties )X ()*_bfb .ViewPr {return _cggd ._adde };

// Open opens and reads a document from a file (.pptx).
func Open (filename string )(*Presentation ,error ){_ggg ,_eaaf :=_fe .Open (filename );if _eaaf !=nil {return nil ,_df .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_eaaf );};defer _ggg .Close ();_fae ,_eaaf :=_fe .Stat (filename );if _eaaf !=nil {return nil ,_df .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_eaaf );};_ =_fae ;return Read (_ggg ,_fae .Size ());};

// SlideText is an array of extracted text items which has some methods for representing extracted text from a slide.
type SlideText struct{Items []*TextItem ;};func _agd ()*Presentation {_bgg :=&Presentation {_ggff :_bfb .NewPresentation ()};_bgg ._ggff .SldIdLst =_bfb .NewCT_SlideIdList ();_bgg ._ggff .ConformanceAttr =_cg .ST_ConformanceClassTransitional ;_bgg .AppProperties =_bf .NewAppProperties ();_bgg .CoreProperties =_bf .NewCoreProperties ();_bgg ._dca =_bf .NewTableStyles ();_bgg .ContentTypes =_bf .NewContentTypes ();_bgg .Rels =_bf .NewRelationships ();_bgg ._egg =_bf .NewRelationships ();_bgg ._bcaf =NewPresentationProperties ();_bgg ._ab =NewViewProperties ();_bgg ._afe =map[string ]string {};return _bgg ;};

// HtmlPubPr returns the HtmlPubPr property.
func (_cc PresentationProperties )HtmlPubPr ()*_bfb .CT_HtmlPublishProperties {return _cc ._gfg .HtmlPubPr ;};

// Paragraphs returns the paragraphs defined in the placeholder.
func (_dd PlaceHolder )Paragraphs ()[]_ec .Paragraph {_bdc :=[]_ec .Paragraph {};for _ ,_egd :=range _dd ._dfe .TxBody .P {_bdc =append (_bdc ,_ec .MakeParagraph (_egd ));};return _bdc ;};

// Text returns text from a slide as one string separated with line breaks.
func (_cbd *SlideText )Text ()string {_bcb :=_g .NewBuffer ([]byte {});for _ ,_gebf :=range _cbd .Items {if _gebf .Text !=""{_bcb .WriteString (_gebf .Text );_bcb .WriteString ("\u000a");};};return _bcb .String ();};

// AddImageToRels adds an image relationship to a slide without putting image on the slide.
func (_fdac Slide )AddImageToRels (img _bf .ImageRef )string {_fga :=0;for _dfg ,_cfeb :=range _fdac ._cgcbc .Images {if _cfeb ==img {_fga =_dfg +1;break ;};};var _ebbb string ;for _gbdc ,_dcad :=range _fdac ._cgcbc .Slides (){if _dcad ._adfb ==_fdac ._adfb {_dfdec :=_df .Sprintf ("\u002e\u002e\u002f\u006ded\u0069\u0061\u002f\u0069\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",_fga ,img .Format ());_facb :=_fdac ._cgcbc ._egad [_gbdc ].AddRelationship (_dfdec ,_fa .ImageType );_ebbb =_facb .ID ();};};return _ebbb ;};func _dac (_bafd []*_bfb .CT_GroupShapeChoice )[]*_bfb .CT_GroupShapeChoice {var _aaf []*_bfb .CT_GroupShapeChoice ;for _ ,_eec :=range _bafd {if len (_eec .Pic )==0{_aaf =append (_aaf ,_eec );};};return _aaf ;};

// SlideViewPr returns the SlideViewPr property.
func (_faea ViewProperties )SlideViewPr ()*_bfb .CT_SlideViewProperties {return _faea ._adde .SlideViewPr ;};

// ExtLst returns the ExtLst property.
func (_aagc ViewProperties )ExtLst ()*_bfb .CT_ExtensionList {return _aagc ._adde .ExtLst };

// ViewProperties contains presentation specific properties.
type ViewProperties struct{_adde *_bfb .ViewPr };

// PresentationProperties contains document specific properties.
type PresentationProperties struct{_gfg *_bfb .PresentationPr };

// SetOffsetX sets horizontal offset of text box in distance units (see measurement package).
func (_dgeg TextBox )SetOffsetX (offX float64 ){_faff :=_dgeg .getOff ();_ccfe :=_bc .ToEMU (offX );_faff .XAttr =_gf .ST_Coordinate {ST_CoordinateUnqualified :&_ccfe };};

// LastViewAttr returns the LastViewAttr property.
func (_acc ViewProperties )LastViewAttr ()_bfb .ST_ViewType {return _acc ._adde .LastViewAttr };

// PrnPr returns the PrnPr property.
func (_cgd PresentationProperties )PrnPr ()*_bfb .CT_PrintProperties {return _cgd ._gfg .PrnPr };

// ClrMru returns the ClrMru property.
func (_eebd PresentationProperties )ClrMru ()*_gf .CT_ColorMRU {return _eebd ._gfg .ClrMru };

// SorterViewPr returns the SorterViewPr property.
func (_ebfa ViewProperties )SorterViewPr ()*_bfb .CT_SlideSorterViewProperties {return _ebfa ._adde .SorterViewPr ;};

// NotesViewPr returns the NotesViewPr property.
func (_addg ViewProperties )NotesViewPr ()*_bfb .CT_NotesViewProperties {return _addg ._adde .NotesViewPr ;};

// GetColorBySchemeColor returns *dml.CT_Color mapped to scheme colors like dk1, lt1 etc. depending on what theme is used in the presentation.
func (_acd *Presentation )GetColorBySchemeColor (schClr _gf .ST_SchemeColorVal )*_gf .CT_Color {if len (_acd ._cgg )==0||len (_acd ._cgc )==0{return nil ;};var _gff _gf .ST_ColorSchemeIndex ;_efeg :=_acd ._cgg [0];_cfca :=_efeg .ClrMap ;switch schClr .String (){case "\u0062\u0067\u0031":_gff =_cfca .Bg1Attr ;case "\u0062\u0067\u0032":_gff =_cfca .Bg2Attr ;case "\u0074\u0078\u0031":_gff =_cfca .Tx1Attr ;case "\u0074\u0078\u0032":_gff =_cfca .Tx2Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0031":_gff =_cfca .Accent1Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0032":_gff =_cfca .Accent2Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0033":_gff =_cfca .Accent3Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0034":_gff =_cfca .Accent4Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0035":_gff =_cfca .Accent5Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0036":_gff =_cfca .Accent6Attr ;case "\u0068\u006c\u0069n\u006b":_gff =_cfca .HlinkAttr ;case "\u0066\u006f\u006c\u0048\u006c\u0069\u006e\u006b":_gff =_cfca .FolHlinkAttr ;case "\u0064\u006b\u0031":_gff =_gf .ST_ColorSchemeIndexDk1 ;case "\u0064\u006b\u0032":_gff =_gf .ST_ColorSchemeIndexDk2 ;case "\u006c\u0074\u0031":_gff =_gf .ST_ColorSchemeIndexLt1 ;case "\u006c\u0074\u0032":_gff =_gf .ST_ColorSchemeIndexLt2 ;default:_gff =_gf .ST_ColorSchemeIndexUnset ;};_ccd :=_acd ._cgc [0];_afd :=_ccd .ThemeElements ;if _afd ==nil {return nil ;};var _ggecb *_gf .CT_Color ;_cea :=_afd .ClrScheme ;switch _gff .String (){case "\u0064\u006b\u0031":_ggecb =_cea .Dk1 ;case "\u0064\u006b\u0032":_ggecb =_cea .Dk2 ;case "\u006c\u0074\u0031":_ggecb =_cea .Lt1 ;case "\u006c\u0074\u0032":_ggecb =_cea .Lt2 ;case "\u0061c\u0063\u0065\u006e\u0074\u0031":_ggecb =_cea .Accent1 ;case "\u0061c\u0063\u0065\u006e\u0074\u0032":_ggecb =_cea .Accent2 ;case "\u0061c\u0063\u0065\u006e\u0074\u0033":_ggecb =_cea .Accent3 ;case "\u0061c\u0063\u0065\u006e\u0074\u0034":_ggecb =_cea .Accent4 ;case "\u0061c\u0063\u0065\u006e\u0074\u0035":_ggecb =_cea .Accent5 ;case "\u0061c\u0063\u0065\u006e\u0074\u0036":_ggecb =_cea .Accent6 ;case "\u0068\u006c\u0069n\u006b":_ggecb =_cea .Hlink ;case "\u0066\u006f\u006c\u0048\u006c\u0069\u006e\u006b":_ggecb =_cea .FolHlink ;default:return nil ;};return _ggecb ;};func (_bdf sort2d )Less (i ,j int )bool {_bebf ,_bfd :=_bdf [i ],_bdf [j ];_bab ,_ef ,_dbg ,_cdf ,_cfe ,_fgd ,_egb ,_ce :=_bebf ._dg ,_bfd ._dg ,_bebf ._dfdg ,_bfd ._dfdg ,_bebf ._ed ,_bfd ._ed ,_bebf ._ega ,_bfd ._ega ;if _dbg ==_cdf {if _bab ==_ef {if _cfe ==_fgd {return _egb <=_ce ;};return _cfe < _fgd ;};return _bab < _ef ;};return _dbg < _cdf ;};func (_ceec *Presentation )onNewRelationship (_aed *_eb .DecodeMap ,_dfea ,_caa string ,_baagf []*_ad .File ,_ded *_db .Relationship ,_gad _eb .Target )error {_efb :=_fa .DocTypePresentation ;switch _caa {case _fa .OfficeDocumentType :_ceec ._ggff =_bfb .NewPresentation ();_aed .AddTarget (_dfea ,_ceec ._ggff ,_caa ,0);_aed .AddTarget (_eb .RelationsPathFor (_dfea ),_ceec ._egg .X (),_caa ,0);_ded .TargetAttr =_fa .RelativeFilename (_efb ,_gad .Typ ,_caa ,0);case _fa .CorePropertiesType :_aed .AddTarget (_dfea ,_ceec .CoreProperties .X (),_caa ,0);_ded .TargetAttr =_fa .RelativeFilename (_efb ,_gad .Typ ,_caa ,0);case _fa .CustomPropertiesType :_aed .AddTarget (_dfea ,_ceec .CustomProperties .X (),_caa ,0);_ded .TargetAttr =_fa .RelativeFilename (_efb ,_gad .Typ ,_caa ,0);case _fa .PresentationPropertiesType :_aed .AddTarget (_dfea ,_ceec ._bcaf .X (),_caa ,0);_ded .TargetAttr =_fa .RelativeFilename (_efb ,_gad .Typ ,_caa ,0);case _fa .ViewPropertiesType :_aed .AddTarget (_dfea ,_ceec ._ab .X (),_caa ,0);_ded .TargetAttr =_fa .RelativeFilename (_efb ,_gad .Typ ,_caa ,0);case _fa .TableStylesType :_aed .AddTarget (_dfea ,_ceec ._dca .X (),_caa ,0);_ded .TargetAttr =_fa .RelativeFilename (_efb ,_gad .Typ ,_caa ,0);case _fa .HyperLinkType :_bbd :=_gf .NewCT_Hyperlink ();_cbdc :=uint32 (len (_ceec ._agg ));_aed .AddTarget (_dfea ,_bbd ,_caa ,_cbdc );_ceec ._agg =append (_ceec ._agg ,_bbd );case _fa .CustomXMLType :_ddc :=&_fa .XSDAny {};_gbe :=uint32 (len (_ceec ._gbd ));_aed .AddTarget (_dfea ,_ddc ,_caa ,_gbe );_ceec ._gbd =append (_ceec ._gbd ,_ddc );_ded .TargetAttr =_fa .RelativeFilename (_efb ,_gad .Typ ,_caa ,len (_ceec ._gbd ));case _fa .ChartType :_gcac :=_fc .NewChartSpace ();_faga :=uint32 (len (_ceec ._cgf ));_aed .AddTarget (_dfea ,_gcac ,_caa ,_faga );_ceec ._cgf =append (_ceec ._cgf ,_gcac );_ded .TargetAttr =_fa .RelativeFilename (_efb ,_gad .Typ ,_caa ,len (_ceec ._cgf ));case _fa .HandoutMasterType :_eba :=_bfb .NewHandoutMaster ();_edcg :=uint32 (len (_ceec ._ggd ));_aed .AddTarget (_dfea ,_eba ,_caa ,_edcg );_ceec ._ggd =append (_ceec ._ggd ,_eba );_ded .TargetAttr =_fa .RelativeFilename (_efb ,_gad .Typ ,_caa ,len (_ceec ._ggd ));case _fa .NotesMasterType :_dba :=_bfb .NewNotesMaster ();_ebd :=uint32 (len (_ceec ._bg ));_aed .AddTarget (_dfea ,_dba ,_caa ,_ebd );_ceec ._bg =append (_ceec ._bg ,_dba );_ded .TargetAttr =_fa .RelativeFilename (_efb ,_gad .Typ ,_caa ,len (_ceec ._bg ));case _fa .ExtendedPropertiesType :_aed .AddTarget (_dfea ,_ceec .AppProperties .X (),_caa ,0);_ded .TargetAttr =_fa .RelativeFilename (_efb ,_gad .Typ ,_caa ,0);case _fa .SlideType :_ggfa :=_bfb .NewSld ();_ceec ._egf =append (_ceec ._egf ,_ggfa );_aed .AddTarget (_dfea ,_ggfa ,_caa ,uint32 (len (_ceec ._egf )));_ded .TargetAttr =_fa .RelativeFilename (_efb ,_gad .Typ ,_caa ,len (_ceec ._egf ));_dbb :=_bf .NewRelationships ();_aed .AddTarget (_eb .RelationsPathFor (_dfea ),_dbb .X (),_caa ,0);_ceec ._egad =append (_ceec ._egad ,_dbb );case _fa .SlideMasterType :_faca :=_bfb .NewSldMaster ();if !_aed .AddTarget (_dfea ,_faca ,_caa ,uint32 (len (_ceec ._cgg )+1)){return nil ;};_ceec ._cgg =append (_ceec ._cgg ,_faca );_ded .TargetAttr =_fa .RelativeFilename (_efb ,_gad .Typ ,_caa ,len (_ceec ._cgg ));_egdf :=_bf .NewRelationships ();_aed .AddTarget (_eb .RelationsPathFor (_dfea ),_egdf .X (),_caa ,0);_ceec ._gae =append (_ceec ._gae ,_egdf );case _fa .SlideLayoutType :_cfc :=_bfb .NewSldLayout ();if !_aed .AddTarget (_dfea ,_cfc ,_caa ,uint32 (len (_ceec ._ecb )+1)){return nil ;};_ceec ._ecb =append (_ceec ._ecb ,_cfc );_ded .TargetAttr =_fa .RelativeFilename (_efb ,_gad .Typ ,_caa ,len (_ceec ._ecb ));_bbec :=_bf .NewRelationships ();_aed .AddTarget (_eb .RelationsPathFor (_dfea ),_bbec .X (),_caa ,0);_ceec ._ebg =append (_ceec ._ebg ,_bbec );case _fa .ThumbnailType :for _gead ,_bea :=range _baagf {if _bea ==nil {continue ;};if _bea .Name ==_dfea {_geac ,_fad :=_bea .Open ();if _fad !=nil {return _df .Errorf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0061\u0064\u0069\u006e\u0067\u0020\u0074\u0068\u0075m\u0062\u006e\u0061i\u006c:\u0020\u0025\u0073",_fad );};_ceec .Thumbnail ,_ ,_fad =_a .Decode (_geac );_geac .Close ();if _fad !=nil {return _df .Errorf ("\u0065\u0072\u0072\u006fr\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020t\u0068u\u006d\u0062\u006e\u0061\u0069\u006c\u003a \u0025\u0073",_fad );};_baagf [_gead ]=nil ;};};case _fa .ThemeType :_baae :=_gf .NewTheme ();if !_aed .AddTarget (_dfea ,_baae ,_caa ,uint32 (len (_ceec ._cgc )+1)){return nil ;};_ceec ._cgc =append (_ceec ._cgc ,_baae );_ded .TargetAttr =_fa .RelativeFilename (_efb ,_gad .Typ ,_caa ,len (_ceec ._cgc ));_ced :=_bf .NewRelationships ();_aed .AddTarget (_eb .RelationsPathFor (_dfea ),_ced .X (),_caa ,0);_ceec ._ecd =append (_ceec ._ecd ,_ced );case _fa .ImageType :_dfea =_ge .Clean (_dfea );if _acg ,_ffgg :=_ceec ._afe [_dfea ];_ffgg {_ded .TargetAttr =_acg ;return nil ;};_aeg :="";for _cega ,_aeb :=range _baagf {if _aeb ==nil {continue ;};if _aeb .Name ==_dfea {_cff ,_dfff :=_eb .ExtractToDiskTmp (_aeb ,_ceec .TmpPath );if _dfff !=nil {return _dfff ;};_gbb ,_dfff :=_bf .ImageFromStorage (_cff );if _dfff !=nil {return _dfff ;};_aeg =_gbb .Format ;_fbab :=_bf .MakeImageRef (_gbb ,&_ceec .DocBase ,_ceec ._egg );_ceec .Images =append (_ceec .Images ,_fbab );_baagf [_cega ]=nil ;_aed .RecordIndex (_dfea ,len (_ceec .Images ));break ;};};_agfe :=_aed .IndexFor (_dfea );_ded .TargetAttr =_fa .RelativeImageFilename (_efb ,_gad .Typ ,_caa ,_agfe ,_aeg );_ceec ._afe [_dfea ]=_ded .TargetAttr ;default:_fa .Log ("\u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0073\u0068\u0069\u0070\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0073\u0020\u0074\u0067\u0074\u003a\u0020\u0025\u0073",_caa ,_dfea );};return nil ;};

// ClearAll completely clears a placeholder. To be useable, at least one
// paragraph must be added after ClearAll via AddParagraph.
func (_ggb PlaceHolder )ClearAll (){_ggb ._dfe .SpPr =_gf .NewCT_ShapeProperties ();_ggb ._dfe .TxBody =_gf .NewCT_TextBody ();_ggb ._dfe .TxBody .LstStyle =_gf .NewCT_TextListStyle ();};

// PlaceHolder is a place holder from a slide.
type PlaceHolder struct{_dfe *_bfb .CT_Shape ;_fee *_bfb .Sld ;};func (_gge sort2d )Len ()int {return len (_gge )};

// TextItem is used for keeping text with references to a paragraph and run, a shape or a table, a row and a cell where it is located.
type TextItem struct{Text string ;Presentation *Presentation ;Shape *_bfb .CT_Shape ;GraphicFrame *_bfb .CT_GraphicalObjectFrame ;Paragraph *_gf .CT_TextParagraph ;Run *_gf .CT_RegularTextRun ;TableInfo *TableInfo ;_dg int64 ;_dfdg int64 ;_ed int ;_ega int ;};

// Remove removes a placeholder from a presentation.
func (_bfg PlaceHolder )Remove ()error {for _aga ,_ceg :=range _bfg ._fee .CSld .SpTree .Choice {for _ ,_gga :=range _ceg .Sp {if _gga ==_bfg ._dfe {copy (_bfg ._fee .CSld .SpTree .Choice [_aga :],_bfg ._fee .CSld .SpTree .Choice [_aga +1:]);_bfg ._fee .CSld .SpTree .Choice =_bfg ._fee .CSld .SpTree .Choice [0:len (_bfg ._fee .CSld .SpTree .Choice )-1];return nil ;};};};return _ea .New ("\u0070\u006c\u0061\u0063\u0065\u0068\u006f\u006c\u0064\u0065r\u0020\u006e\u006f\u0074\u0020\u0066\u006fu\u006e\u0064\u0020\u0069\u006e\u0020\u0073\u006c\u0069\u0064\u0065");};

// X returns the inner wrapped XML type.
func (_bbb PlaceHolder )X ()*_bfb .CT_Shape {return _bbb ._dfe };

// AddParagraph adds a new paragraph to a placeholder.
func (_dff PlaceHolder )AddParagraph ()_ec .Paragraph {_gca :=_ec .MakeParagraph (_gf .NewCT_TextParagraph ());_dff ._dfe .TxBody .P =append (_dff ._dfe .TxBody .P ,_gca .X ());return _gca ;};

// AddTable adds an empty table to a slide.
func (_aab Slide )AddTable ()*_bf .Table {_fbdb :=_bfb .NewCT_GroupShapeChoice ();_aab ._adfb .CSld .SpTree .Choice =append (_aab ._adfb .CSld .SpTree .Choice ,_fbdb );_ecc :=_bfb .NewCT_GraphicalObjectFrame ();_fbdb .GraphicFrame =append (_fbdb .GraphicFrame ,_ecc );_ecc .Xfrm .Off =_gf .NewCT_Point2D ();_ebgd :=int64 (1);_ecc .Xfrm .Off .XAttr =_gf .ST_Coordinate {ST_CoordinateUnqualified :&_ebgd };_ecc .Xfrm .Off .YAttr =_gf .ST_Coordinate {ST_CoordinateUnqualified :&_ebgd };_fceg :=_ecc .Graphic .CT_GraphicalObject .GraphicData ;_fceg .UriAttr ="\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0074\u0061\u0062\u006c\u0065";_dcbb :=_bf .NewTableWithXfrm (_ecc .Xfrm );_fceg .Any =append (_fceg .Any ,_dcbb .X ());return _dcbb ;};

// TableInfo is used for keep information about a table, a row and a cell where the text is located.
type TableInfo struct{Table *_gf .CT_Table ;Row *_gf .CT_TableRow ;Cell *_gf .CT_TableCell ;RowIndex int ;ColIndex int ;};func (_dfc sort2d )Swap (i ,j int ){_dfc [i ],_dfc [j ]=_dfc [j ],_dfc [i ]};

// GetLayoutByName retrieves a slide layout given a layout name.
func (_fdf *Presentation )GetLayoutByName (name string )(SlideLayout ,error ){for _ ,_gegf :=range _fdf ._ecb {if _gegf .CSld .NameAttr !=nil &&name ==*_gegf .CSld .NameAttr {return SlideLayout {_gegf },nil ;};};return SlideLayout {},_ea .New ("\u0075\u006eab\u006c\u0065\u0020t\u006f\u0020\u0066\u0069nd \u006cay\u006f\u0075\u0074\u0020\u0077\u0069\u0074h \u0074\u0068\u0061\u0074\u0020\u006e\u0061m\u0065");};

// Read reads a document from an io.Reader.
func Read (r _d .ReaderAt ,size int64 )(*Presentation ,error ){_daf :=_agd ();_aca ,_fcc :=_eeg .TempDir ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065-\u0070\u0070\u0074\u0078");if _fcc !=nil {return nil ,_fcc ;};_daf .TmpPath =_aca ;_fgb ,_fcc :=_ad .NewReader (r ,size );if _fcc !=nil {return nil ,_df .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u007a\u0069\u0070\u003a\u0020\u0025\u0073",_fcc );};_aecd :=[]*_ad .File {};_aecd =append (_aecd ,_fgb .File ...);_aece :=false ;for _ ,_efg :=range _aecd {if _efg .FileHeader .Name =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_aece =true ;break ;};};if _aece {_daf .CreateCustomProperties ();};_cag :=_eb .DecodeMap {};_cag .SetOnNewRelationshipFunc (_daf .onNewRelationship );_cag .AddTarget (_fa .ContentTypesFilename ,_daf .ContentTypes .X (),"",0);_cag .AddTarget (_fa .BaseRelsFilename ,_daf .Rels .X (),"",0);if _dea :=_cag .Decode (_aecd );_dea !=nil {return nil ,_dea ;};for _ ,_aafa :=range _aecd {if _aafa ==nil {continue ;};if _fdab :=_daf .AddExtraFileFromZip (_aafa );_fdab !=nil {return nil ,_fdab ;};};if _aece {_gaf :=false ;for _ ,_cgge :=range _daf .Rels .X ().Relationship {if _cgge .TargetAttr =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_gaf =true ;break ;};};if !_gaf {_daf .AddCustomRelationships ();};};return _daf ,nil ;};

// AddImage adds an image textbox to a slide.
func (_cage Slide )AddImage (img _bf .ImageRef )Image {_adac :=_bfb .NewCT_GroupShapeChoice ();_cage ._adfb .CSld .SpTree .Choice =append (_cage ._adfb .CSld .SpTree .Choice ,_adac );_ead :=_bfb .NewCT_Picture ();_adac .Pic =append (_adac .Pic ,_ead );_ead .NvPicPr .CNvPicPr =_gf .NewCT_NonVisualPictureProperties ();_ead .NvPicPr .CNvPicPr .PicLocks =_gf .NewCT_PictureLocking ();_ead .NvPicPr .CNvPicPr .PicLocks .NoChangeAspectAttr =_fa .Bool (true );_ead .BlipFill =_gf .NewCT_BlipFillProperties ();_ead .BlipFill .Blip =_gf .NewCT_Blip ();_daaf :=_cage .AddImageToRels (img );_ead .BlipFill .Blip .EmbedAttr =_fa .String (_daaf );_ead .BlipFill .Stretch =_gf .NewCT_StretchInfoProperties ();_ead .BlipFill .Stretch .FillRect =_gf .NewCT_RelativeRect ();_ead .SpPr =_gf .NewCT_ShapeProperties ();_ead .SpPr .PrstGeom =_gf .NewCT_PresetGeometry2D ();_ead .SpPr .PrstGeom .PrstAttr =_gf .ST_ShapeTypeRect ;_dfde :=Image {_ead };_ceeb :=img .Size ();_dfde .Properties ().SetWidth (_bc .Distance (_ceeb .X )*_bc .Pixel72 );_dfde .Properties ().SetHeight (_bc .Distance (_ceeb .Y )*_bc .Pixel72 );_dfde .Properties ().SetPosition (0,0);return _dfde ;};

// SetTextAnchor controls the text anchoring
func (_fbdbb TextBox )SetTextAnchor (a _gf .ST_TextAnchoringType ){_fbdbb ._baee .TxBody .BodyPr =_gf .NewCT_TextBodyProperties ();_fbdbb ._baee .TxBody .BodyPr .AnchorAttr =a ;};

// Clear clears the placeholder contents and adds a single empty paragraph.  The
// empty paragrah is required by PowerPoint or it will report the file as being
// invalid.
func (_bca PlaceHolder )Clear (){_bca .ClearAll ();_edf :=_gf .NewCT_TextParagraph ();_bca ._dfe .TxBody .P =[]*_gf .CT_TextParagraph {_edf };_edf .EndParaRPr =_gf .NewCT_TextCharacterProperties ();_edf .EndParaRPr .LangAttr =_fa .String ("\u0065\u006e\u002dU\u0053");};

// OutlineViewPr returns the OutlineViewPr property.
func (_abf ViewProperties )OutlineViewPr ()*_bfb .CT_OutlineViewProperties {return _abf ._adde .OutlineViewPr ;};

// Properties returns the properties of the TextBox.
func (_faf Image )Properties ()_ec .ShapeProperties {if _faf ._bb .SpPr ==nil {_faf ._bb .SpPr =_gf .NewCT_ShapeProperties ();};return _ec .MakeShapeProperties (_faf ._bb .SpPr );};

// NewPresentationProperties constructs a new PresentationProperties.
func NewPresentationProperties ()PresentationProperties {return PresentationProperties {_gfg :_bfb .NewPresentationPr ()};};

// SlideLayouts returns the slide layouts defined in the presentation.
func (_ebb *Presentation )SlideLayouts ()[]SlideLayout {_afag :=[]SlideLayout {};for _ ,_bbcd :=range _ebb ._ecb {_afag =append (_afag ,SlideLayout {_bbcd });};return _afag ;};

// GetPlaceholder returns a placeholder given its type.  If there are multiplace
// placeholders of the same type, this method returns the first one.  You must use the
// PlaceHolders() method to access the others.
func (_fcdbc Slide )GetPlaceholder (t _bfb .ST_PlaceholderType )(PlaceHolder ,error ){for _ ,_agga :=range _fcdbc ._adfb .CSld .SpTree .Choice {for _ ,_fdc :=range _agga .Sp {if _fdc .NvSpPr !=nil &&_fdc .NvSpPr .NvPr !=nil &&_fdc .NvSpPr .NvPr .Ph !=nil {if _fdc .NvSpPr .NvPr .Ph .TypeAttr ==t {return PlaceHolder {_fdc ,_fcdbc ._adfb },nil ;};};};};return PlaceHolder {},_ea .New ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066i\u006e\u0064\u0020\u0070\u006c\u0061\u0063\u0065\u0068\u006fl\u0064\u0065\u0072");};

// SlideMaster is the slide master for a presentation.
type SlideMaster struct{_bcbf *Presentation ;_aeca _bf .Relationships ;_abe *_bfb .SldMaster ;};

// ShowCommentsAttr returns the WebPr property.
func (_gda ViewProperties )ShowCommentsAttr ()*bool {return _gda ._adde .ShowCommentsAttr };

// ExtLst returns the ExtLst property.
func (_agag PresentationProperties )ExtLst ()*_bfb .CT_ExtensionList {return _agag ._gfg .ExtLst };var _befd =false ;

// PlaceHolders returns all of the content place holders within a given slide.
func (_fbb Slide )PlaceHolders ()[]PlaceHolder {_fcgc :=[]PlaceHolder {};for _ ,_ffe :=range _fbb ._adfb .CSld .SpTree .Choice {for _ ,_dbc :=range _ffe .Sp {if _dbc .NvSpPr !=nil &&_dbc .NvSpPr .NvPr !=nil &&_dbc .NvSpPr .NvPr .Ph !=nil {_fcgc =append (_fcgc ,PlaceHolder {_dbc ,_fbb ._adfb });};};};return _fcgc ;};